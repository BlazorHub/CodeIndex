@page "/"
@inject HttpClient Client
@inject CodeIndex.Common.Storage Storage

<h1>Lucene Search Test Page</h1>
<div class="input-group mb-3">
    <div class="input-group-prepend">
        <span class="input-group-text" id="basic-addon1">Content</span>
    </div>
    <input type="text" class="form-control" placeholder="Put Your Content Here" aria-label="Put Your Content Here" @bind-value="@ContentQuery" @bind-value:event="oninput" @onkeydown="@(async e => await KeyPress(e))" />
</div>
<div class="input-group mb-3">
    <div class="input-group-prepend">
        <span class="input-group-text" id="basic-addon2">File Name</span>
    </div>
    <input type="text" class="form-control" placeholder="Put Your File Name Here" aria-label="Put Your File Name Here" @bind-value="@FileNameQuery" @bind-value:event="oninput" @onkeydown="@(async e => await KeyPress(e))" />
</div>
<div class="input-group mb-3">
    <div class="input-group-prepend">
        <span class="input-group-text" id="basic-addon3">File Extension</span>
    </div>
    <input type="text" class="form-control" placeholder="Put Your File Extension Here" aria-label="Put Your File Extension Here" @bind-value="@FileExtensionQuery" @bind-value:event="oninput" @onkeydown="@(async e => await KeyPress(e))" />
</div>
<div class="input-group mb-4">
    <div class="input-group-prepend">
        <span class="input-group-text" id="basic-addon4">File Location</span>
    </div>
    <input type="text" class="form-control" placeholder="Put Your File Location Here" aria-label="Put Your File Location Here" @bind-value="@FilePathQuery" @bind-value:event="oninput" @onkeydown="@(async e => await KeyPress(e))" />
</div>
<div class="input-group mb-3">
    <button type="button" class="btn btn-primary" @onclick="SearchLuceneIndex">Search</button>
</div>
<div class="input-group mb-3">
    @if (!FetchResult?.Status?.Success ?? false)
    {
        <div class="alert alert-danger" role="alert">
            @FetchResult.Status.StatusDesc
        </div>
    }
    else if (FetchResult?.Status?.Success ?? false)
    {
        <div class="alert alert-success" role="alert">
            Post Success, Find Results: @FetchResult?.Result?.Count()
        </div>
    }
    else
    {
        <div class="alert alert-info" role="alert">
            Waiting For Search
        </div>
    }
</div>
<table class="table">
    <thead>
        <tr>
            <th scope="col">File Name</th>
            <th scope="col">File Extension</th>
            <th scope="col">File Path</th>
            <th scope="col">Index Date</th>
            <th scope="col">Last Write Time Utc</th>
            <th scope="col">Content</th>
            <th scope="col">Details</th>
        </tr>
    </thead>
    <tbody>
        @if (FetchResult?.Result != null && FetchResult.Result.Any())
        {
            foreach (var item in FetchResult.Result)
            {
                <tr>
                    <td>@item.FileName</td>
                    <td>@item.FileExtension</td>
                    <td>@item.FilePath</td>
                    <td>@item.IndexDate</td>
                    <td>@item.LastWriteTimeUtc</td>
                    <td>
                        <pre>@((MarkupString)item.Content)</pre>
                    </td>
                    <td>
                        <a href="/Details/@item.CodePK/@SearchQuery">Details</a>
                    </td>
                </tr>
            }
        }
        else
        {
            <tr>
                <td colspan="6" class="text-center">Empty</td>
            </tr>
        }
    </tbody>
</table>

@code {

    public string SearchQuery => Search.QueryGenerator.GetSearchStr(FileNameQuery, ContentQuery, FileExtensionQuery, FilePathQuery);

    public string ContentQuery { get; set; }

    public string FileNameQuery { get; set; }

    public string FileExtensionQuery { get; set; }

    public string FilePathQuery { get; set; }


    public FetchResult<IEnumerable<CodeSource>> FetchResult { get; set; }

    bool IsSearching;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        ContentQuery = Storage.GetValue("ContentQuery")?.ToString();
        FileNameQuery = Storage.GetValue("FileNameQuery")?.ToString();
        FileExtensionQuery = Storage.GetValue("FileExtensionQuery")?.ToString();
        FilePathQuery = Storage.GetValue("FilePathQuery")?.ToString();

        if (!string.IsNullOrEmpty(SearchQuery))
        {
            await SearchLuceneIndex();
        }
    }

    async Task SearchLuceneIndex()
    {
        if (IsSearching)
        {
            return;
        }

        Storage.SetOrUpdate("ContentQuery", ContentQuery);
        Storage.SetOrUpdate("FileNameQuery", FileNameQuery);
        Storage.SetOrUpdate("FileExtensionQuery", FileExtensionQuery);
        Storage.SetOrUpdate("FilePathQuery", FilePathQuery);

        IsSearching = true;
        FetchResult = await Client.GetJsonAsync<FetchResult<IEnumerable<CodeSource>>>("api/lucene/GetCodeSources?searchStr=" + System.Web.HttpUtility.UrlEncode(SearchQuery) + "&preview=true");
        IsSearching = false;
    }

    private async Task KeyPress(KeyboardEventArgs e)
    {
        if (e.Key == "Enter")
        {
            await SearchLuceneIndex();
        }
    }
}
